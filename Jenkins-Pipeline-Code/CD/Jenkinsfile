pipeline {
    agent any

    parameters {
        choice(
            name: 'DEPLOY_COMPONENT',
            choices: ['all', 'backend', 'frontend', 'database'],
            description: 'Select which component to deploy to AWS EKS'
        )
    }

    environment {
        AWS_ACCOUNT_ID     = "688372068524"
        AWS_REGION         = "ap-south-1"
        ECR_BACKEND_REPO   = "capstone/backend-img"
        ECR_FRONTEND_REPO  = "capstone/frontend-img"
        KUBE_NAMESPACE     = "three-tier"
        CLUSTER_NAME       = "three-tier-cluster"
        KUBECONFIG_PATH    = "${WORKSPACE}/kubeconfig"
        K8S_DIR            = "${WORKSPACE}/Kubernetes-Manifests-file"
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo "üì• Checking out application code..."
                git branch: 'main', url: 'https://github.com/sachinashokyadav/ThreeTierApplication.git'
            }
        }

        stage('Configure AWS CLI & Kubeconfig') {
            steps {
                script {
                    echo "‚öôÔ∏è Configuring AWS CLI and EKS kubeconfig..."
                    sh """
                        aws configure set region ${AWS_REGION}
                        aws eks update-kubeconfig \
                            --region ${AWS_REGION} \
                            --name ${CLUSTER_NAME} \
                            --kubeconfig ${KUBECONFIG_PATH}
                    """
                }
            }
        }

        stage('Fetch Latest Image Tags from AWS ECR') {
            steps {
                script {
                    echo "üîç Fetching latest image tags from ECR..."

                    env.FRONTEND_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_FRONTEND_REPO} \
                                --region ${AWS_REGION} \
                                --query "sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]" \
                                --output text
                        """,
                        returnStdout: true
                    ).trim()

                    env.BACKEND_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_BACKEND_REPO} \
                                --region ${AWS_REGION} \
                                --query "sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]" \
                                --output text
                        """,
                        returnStdout: true
                    ).trim()

                    echo "‚úÖ Latest Backend Image: ${BACKEND_TAG}"
                    echo "‚úÖ Latest Frontend Image: ${FRONTEND_TAG}"
                }
            }
        }

        stage('Deploy to AWS EKS') {
            steps {
                script {
                    echo "üöÄ Deploying component: ${params.DEPLOY_COMPONENT}"

                    sh """
                        export KUBECONFIG=${KUBECONFIG_PATH}

                        # ============================
                        # üß† DATABASE DEPLOYMENT
                        # ============================
                        if [ "${params.DEPLOY_COMPONENT}" = "database" ] || [ "${params.DEPLOY_COMPONENT}" = "all" ]; then
                            echo "üß† Deploying Database..."
                            #kubectl apply -f ${K8S_DIR}/Database/secret.yaml -n ${KUBE_NAMESPACE}
                            kubectl apply -f ${K8S_DIR}/Database/deployment.yaml -n ${KUBE_NAMESPACE}
                            #kubectl apply -f ${K8S_DIR}/Database/service.yaml -n ${KUBE_NAMESPACE}

                            echo "‚è≥ Waiting for Database rollout..."
                            if ! kubectl rollout status deployment/database -n ${KUBE_NAMESPACE} --timeout=120s; then
                                echo "‚ùå Database rollout failed! Rolling back..."
                                kubectl rollout undo deployment/database -n ${KUBE_NAMESPACE}
                                exit 1
                            fi
                        fi

                        # ============================
                        # üß± BACKEND DEPLOYMENT
                        # ============================
                        if [ "${params.DEPLOY_COMPONENT}" = "backend" ] || [ "${params.DEPLOY_COMPONENT}" = "all" ]; then
                            echo "üß± Deploying Backend..."
                            sed -i "s|image: .*backend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_BACKEND_REPO}:${BACKEND_TAG}|g" ${K8S_DIR}/Backend/deployment.yaml

                            kubectl apply -f ${K8S_DIR}/Backend/deployment.yaml -n ${KUBE_NAMESPACE}
                            #kubectl apply -f ${K8S_DIR}/Backend/service.yaml -n ${KUBE_NAMESPACE}

                            echo "‚è≥ Waiting for Backend rollout..."
                            if ! kubectl rollout status deployment/api -n ${KUBE_NAMESPACE} --timeout=120s; then
                                echo "‚ùå Backend rollout failed! Rolling back..."
                                kubectl rollout undo deployment/api -n ${KUBE_NAMESPACE}
                                exit 1
                            fi
                        fi

                        # ============================
                        # üåê FRONTEND DEPLOYMENT
                        # ============================
                        if [ "${params.DEPLOY_COMPONENT}" = "frontend" ] || [ "${params.DEPLOY_COMPONENT}" = "all" ]; then
                            echo "üåê Deploying Frontend..."
                            sed -i "s|image: .*frontend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_FRONTEND_REPO}:${FRONTEND_TAG}|g" ${K8S_DIR}/Frontend/deployment.yaml

                            kubectl apply -f ${K8S_DIR}/Frontend/deployment.yaml -n ${KUBE_NAMESPACE}
                            #kubectl apply -f ${K8S_DIR}/Frontend/service.yaml -n ${KUBE_NAMESPACE}

                            echo "‚è≥ Waiting for Frontend rollout..."
                            if ! kubectl rollout status deployment/frontend -n ${KUBE_NAMESPACE} --timeout=120s; then
                                echo "‚ùå Frontend rollout failed! Rolling back..."
                                kubectl rollout undo deployment/frontend -n ${KUBE_NAMESPACE}
                                exit 1
                            fi
                        fi

                        # ============================
                        # üåç INGRESS DEPLOYMENT
                        # ============================
                        #if [ "${params.DEPLOY_COMPONENT}" = "all" ]; then
                        #    echo "üåç Applying Ingress..."
                        #   kubectl apply -f ${K8S_DIR}/ingress.yaml -n ${KUBE_NAMESPACE}
                        #fi
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment successful!"
            echo "Deployed component: ${params.DEPLOY_COMPONENT}"
        }
        failure {
            echo "‚ùå Deployment failed! Check Jenkins logs for details."
        }
    }
}
