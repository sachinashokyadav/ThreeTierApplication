pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID   = "688372068524"
        AWS_REGION       = "ap-south-1"
        ECR_BACKEND_REPO = "capstone/backend-img"
        ECR_FRONTEND_REPO = "capstone/frontend-img"
        KUBE_NAMESPACE   = "three-tier"              // ‚úÖ same as your EKS namespace
        CLUSTER_NAME     = "march-2025-eks"
        KUBECONFIG_PATH  = "${WORKSPACE}/kubeconfig"
        K8S_DIR          = "${WORKSPACE}/Kubernetes-Manifests-file"
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sachinashokyadav/capstone-project.git'
            }
        }

        stage('Configure AWS CLI & Kubeconfig') {
            steps {
                script {
                    echo "‚öôÔ∏è Configuring AWS CLI and EKS kubeconfig..."
                    withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials') {
                        sh """
                            aws configure set region ${AWS_REGION}
                            aws eks update-kubeconfig --region ${AWS_REGION} --name ${CLUSTER_NAME} --kubeconfig ${KUBECONFIG_PATH}
                        """
                    }
                }
            }
        }

        stage('Fetch Latest Image Tags from ECR') {
            steps {
                script {
                    echo "üîç Fetching latest backend and frontend image tags from ECR..."

                    env.BACKEND_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_BACKEND_REPO} \
                                --region ${AWS_REGION} \
                                --query "sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]" \
                                --output text
                        """,
                        returnStdout: true
                    ).trim()

                    env.FRONTEND_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_FRONTEND_REPO} \
                                --region ${AWS_REGION} \
                                --query "sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]" \
                                --output text
                        """,
                        returnStdout: true
                    ).trim()

                    echo "‚úÖ Latest BACKEND_TAG: ${BACKEND_TAG}"
                    echo "‚úÖ Latest FRONTEND_TAG: ${FRONTEND_TAG}"
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    echo "üöÄ Deploying updated images to AWS EKS cluster..."

                    sh """
                        export KUBECONFIG=${KUBECONFIG_PATH}

                        echo "üìù Updating image tags in manifests..."
                        sed -i "s|image: .*backend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_BACKEND_REPO}:${BACKEND_TAG}|g" ${K8S_DIR}/backend-deployment.yaml
                        sed -i "s|image: .*frontend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_FRONTEND_REPO}:${FRONTEND_TAG}|g" ${K8S_DIR}/frontend-deployment.yaml

                        echo "üì¶ Applying updated manifests..."
                        kubectl apply -f ${K8S_DIR}/backend-deployment.yaml -n ${KUBE_NAMESPACE}
                        kubectl apply -f ${K8S_DIR}/frontend-deployment.yaml -n ${KUBE_NAMESPACE}

                        echo "‚è≥ Waiting for rollout..."
                        kubectl rollout status deployment/backend-deployment -n ${KUBE_NAMESPACE} || true
                        kubectl rollout status deployment/frontend-deployment -n ${KUBE_NAMESPACE} || true

                        echo "‚úÖ Deployment completed successfully!"
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Successfully deployed latest Docker images to AWS EKS!"
        }
        failure {
            echo "‚ùå Deployment failed. Please check Jenkins logs for details."
        }
    }
}
